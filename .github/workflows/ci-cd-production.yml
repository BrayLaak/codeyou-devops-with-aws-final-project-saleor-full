name: Production CI/CD Pipeline

on:
  push:
    branches:
      - production

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget -y
        wget https://github.com/aquasecurity/trivy/releases/download/v0.20.2/trivy_0.20.2_Linux-64bit.deb
        sudo dpkg -i trivy_0.20.2_Linux-64bit.deb

    - name: Build Docker Image for Saleor API
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/saleor-api:production ./saleor-api

    - name: Trivy Scan for Saleor API
      run: trivy image ${{ secrets.DOCKERHUB_USERNAME }}/saleor-api:production

    - name: Push Saleor API Image to DockerHub
      run: |
        echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/saleor-api:production
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/saleor-api:production ${{ secrets.DOCKERHUB_USERNAME }}/saleor-api:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/saleor-api:latest

    - name: Build Docker Image for Saleor Dashboard
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/saleor-dashboard:production ./saleor-dashboard

    - name: Trivy Scan for Saleor Dashboard
      run: trivy image ${{ secrets.DOCKERHUB_USERNAME }}/saleor-dashboard:production

    - name: Push Saleor Dashboard Image to DockerHub
      run: |
        echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/saleor-dashboard:production
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/saleor-dashboard:production ${{ secrets.DOCKERHUB_USERNAME }}/saleor-dashboard:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/saleor-dashboard:latest

    - name: Set up AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli
        aws --version

    - name: Configure AWS Credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region us-east-2

    - name: Deploy to AWS Fargate
      run: |
        aws ecs update-service --cluster BL_Fargate_Saleor --service BL_Fargate_SaleorService --force-new-deployment
